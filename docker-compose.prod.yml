version: '3.8'

services:
  db:
    image: postgis/postgis:15-3.3
    container_name: osm_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-osmtiles}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: osm_redis_prod
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  backend:
    image: ${DOCKER_REGISTRY}osm-to-pmtiles-backend:latest
    container_name: osm_backend_prod
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
      - POSTGRES_DB=${POSTGRES_DB:-osmtiles}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - API_PORT=3001
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-10737418240}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: ${DOCKER_REGISTRY}osm-to-pmtiles-frontend:latest
    container_name: osm_frontend_prod
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: osm_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
