version: '3.8'

services:
  db:
    image: postgis/postgis:15-3.3
    container_name: osm_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-osmtiles}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: osm_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: osm_backend
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=db
      - POSTGRES_DB=osmtiles
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3001:3001"
    volumes:
      - ./src/backend:/app
      - ./data:/app/data
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: npm start

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: osm_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
